let mapleader = " "
"set nu rnu
set clipboard=unnamedplus
set ignorecase
set smartcase
set hlsearch
set incsearch "highlight halfway typing

" #### IdeaVim ####
set ideajoin
set idearefactormode=keep

" #### Idea Plugins ####"
set surround
set commentary
set easymotion
set multiple-cursors "<A-n>, <A-x>, <A-p>, g<A-n>
set textobj-entire
set argtextobj
set ReplaceWithRegister

" #### Maps ####
nnoremap Y yg_
nnoremap y_ y^
nnoremap d_ d^
nnoremap c_ c^
nnoremap <leader>. @:
nnoremap <leader>sc :nohl<CR>
nnoremap <Leader>sr :%s///gcI<left><left><left><left><left>
vnoremap sr y:%s///gcI<left><left><left><left><left><C-r>0<right>
vnoremap ss y/<C-r>0<CR>
"yank/delete/visual method
nnoremap ym [M+eV]My
nnoremap dm [M+eV]Md
nnoremap vm [M+eV]M
nnoremap ö $
"nnoremap ä } " better caps-ä ?"
"nnoremap Ä { " better caps-Ä ?"

" Comma for major mode
nmap , <leader>m
vmap , <leader>m

" #### Replace Keymaps "
nnoremap <C-,> :action ShowSettings<CR>


" #### Maps Idea Actions ####
source ~/.intellimacs/spacemacs.vim
source ~/.intellimacs/extra.vim
source ~/.intellimacs/major.vim

nnoremap <Leader>mgs :action GotoSuperMethod<CR>

"nnoremap <Leader>rr :action Rerun<CR>
"nnoremap <Leader>mm :action MainMenu<CR>
"nnoremap gs :action GotoSuperMethod<CR>

"nnoremap <Leader>fs :action FileStructurePopup<CR>
"nnoremap <Leader>re :action RecentFiles<CR>
"nnoremap <Leader>rn :action RenameElement<CR>
"nnoremap <Leader>ru :action RunClass<CR>
"nnoremap <Leader>se :action ShowErrorDescription<CR>
"nnoremap <Leader>sb :action ToggleLineBreakpoint<CR>
"nnoremap <Leader>ne :action GotoNextError<CR>
"nnoremap <Leader>pe :action GotoPreviousError<CR>
"nnoremap <Leader>cf :action ReformatCode<CR>
"nnoremap gi :action GotoImplementation<CR>
"nnoremap gt :action GotoTest<CR>
"
""Refactor
" SPC m r"
"noremap <Leader>in :action Inline<CR>
nnoremap <leader>mrin    :action Inline<CR>
vnoremap <leader>mrin    <Esc>:action Inline<CR>

"noremap <Leader>ev :action IntroduceVariable<CR>
nnoremap <leader>mrev    :action IntroduceVariable<CR>
vnoremap <leader>mrev    <Esc>:action IntroduceVariable<CR>

"noremap <Leader>ep :action IntroduceParameter<CR>
nnoremap <leader>mrep    :action IntroduceParameter<CR>
vnoremap <leader>mrep    <Esc>:action IntroduceParameter<CR>

"noremap <Leader>ec :action IntroduceConstant<CR>
nnoremap <leader>mrec    :action IntroduceConstant<CR>
vnoremap <leader>mrec    <Esc>:action IntroduceConstant<CR>

"noremap <Leader>ef :action IntroduceField<CR>
nnoremap <leader>mref    :action IntroduceField<CR>
vnoremap <leader>mref    <Esc>:action IntroduceField<CR>

"noremap <Leader>eo :action IntroduceParameterObject<CR>
nnoremap <leader>mreo    :action IntroduceParameterObject<CR>
vnoremap <leader>mreo    <Esc>:action IntroduceParameterObject<CR>


"noremap <Leader>em :action ExtractMethod<CR>
"
"" Window
"nnoremap <C-W>n :action ViewNavigationBar<CR>
"nnoremap <C-W>d :action ActivateDatabaseToolWindow<CR>
"nnoremap <C-W>g :action ActivateGradleToolWindow<CR>
"nnoremap <C-W>t :action ActivateTODOToolWindow<CR>
"nnoremap <C-W>p :action ActivateProjectToolWindow<CR>
"nnoremap <C-W>b :action Annotate<CR>
"
""misc
"nnoremap gh :action ShowIntentionActions<CR> "V*
"vnoremap af :action EditorSelectWord<CR> "V*
"
"" #### Maps Plugins #### "
"map <Leader> <Plug>(easymotion-prefix) "-> only one <Leader>, instead of <Leader><Leader>
"map <Leader>w <Plug>(easymotion-bd-w)
"map <Leader>W <Plug>(easymotion-bd-W)

" #### TODO ####
" "Run this", "Run all", "Stop execution", "Debug this", Code coverage
" jumb back to last file, maybe via Tab actions."
" C-S-h/l change method private -> public -> ...
" C-S-j/k change variable/method final/..(?)
" jumb to next "Element". Example-> return findReference(seaShip, this::isKnExportReference, KnExportReference::knExportReference);
" correct copy, yank, delte methode"
* change C-A j/k to A j/k
"TypeHierarchyBase.BaseOnThisType
"TypeHierarchy
"MethodHierarchy.BaseOnThisMethod
"MethodHierarchy
"CallHierarchy
"CallHierarchy.BaseOnThisMethod

" vim camel case ]b ]w [b [w
" vim debug..
" vim smooth scorlling"
"IntroduceFunctionalVariable
"IntroduceFunctionalParameter                       <A-C-S-P>
" Maybe: Commit, fetch, Type-Hierachie, sourround/insert with livetemplate
"map <Leader>nd :action NextDiff<CR>
"map <Leader>pd :action PreviousDiff<CR>

" ### DISABLED #####
"vnoremap <leader>y "+y
"nnoremap <leader>Y "+yg_
"nnoremap <leader>y "+y
"nnoremap <leader>yy "+yy
"nnoremap <leader>p "+p
"nnoremap <leader>P "+P
"noremap <leader>p "+p
"noremap <leader>P "+P
"nnoremap <Leader>j :action MethodDown<CR>
"nnoremap <Leader>k :action MethodUp<CR>
"nnoremap <Leader>mk :action MoveStatementUp<CR>
"nnoremap <Leader>mj :action MoveStatementDown<CR>
"nnoremap <leader>af :action EditorSelectWord<CR>
"vnoremap aa :action GuiDesigner.ExpandSelection<CR>
"vnoremap ab :action SmartSelect<CR>
"vnoremap ac :action TableResult.GrowSelection<CR>

"nnoremap <leader>af :action EditorSelectWord<CR>
"vnoremap aa :action GuiDesigner.ExpandSelection<CR>
"vnoremap ab :action SmartSelect<CR>
"vnoremap ac :action TableResult.GrowSelection<CR>


"*V = like in Visual Studio Code
